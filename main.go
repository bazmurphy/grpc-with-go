package main

import (
	"context"
	"log"
	"net"

	"github.com/bazmurphy/grpc-with-go/invoicer"
	"google.golang.org/grpc"
)

// [0] make the type
type myInvoicerServer struct {
	// [2] we must embed this other type for forward compatibility
	invoicer.UnimplementedInvoicerServer
}

// [1] make the method
// the method should be called Create, and it should take a context.Context and a *CreateRequest
// and return a *CreateResponse and an error
func (s myInvoicerServer) Create(ctx context.Context, req *invoicer.CreateRequest) (*invoicer.CreateResponse, error) {
	return &invoicer.CreateResponse{
		// Pdf:  []byte("test"),
		Pdf:  []byte(req.From),
		Docx: []byte("test"),
	}, nil
}

func main() {
	listener, err := net.Listen("tcp", ":8080")
	if err != nil {
		// if we have an error we will exit the program
		log.Fatalf("cannot create the listener: %s", err)
	}

	// we create our new server using a method from the grpc package
	serverRegistrar := grpc.NewServer()

	// we create a new service that is a pointer to myInvoiceServer{}
	service := &myInvoicerServer{}

	// now we can call the RegisterInvoicerServer
	// this method was generated by protoc
	// it takes as its first argument a grpc.ServiceRegistrar
	// and as its second argument we have to give an InvoicerServer
	// and if we look at the Type, we can see its the Create we defined in our .proto file

	// type InvoicerServer interface {
	// 	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// 	mustEmbedUnimplementedInvoicerServer()
	// }

	invoicer.RegisterInvoicerServer(serverRegistrar, service)

	// so we have to make a new type that implements the interface InvoicerServer (see above)

	// now we can create our server, we pass it the listener we made above, and it returns an error
	err = serverRegistrar.Serve(listener)
	if err != nil {
		// if we have an error we will exit the program
		log.Fatalf("not possible to serve: %s", err)
	}

	// in order to test the server, we should be able to create a message, encode it with protocol buffers and then send it to the server
	// it's not that easy to encode a message into the protocol buffer format
	// we can use any tool to test our rpc server
	// postman can send grpc
	// we import the .proto file and send an example message
}
